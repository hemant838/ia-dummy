generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:zJ3peQKuZXJmY7zQmTMbyHak5kkqf3Tw@supabase-dev.indiaaccelerator.co:5433/postgres?connection_limit=1"
  schemas = ["paramount"]
}

model Account {
  id                String   @id(map: "PK_Account") @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "IX_Account_userId")
  @@schema("paramount")
}

model ApiKey {
  id             String       @id(map: "PK_ApiKey") @default(uuid()) @db.Uuid
  organizationId String       @db.Uuid
  description    String       @db.VarChar(70)
  hashedKey      String       @unique
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId], map: "IX_ApiKey_organizationId")
  @@schema("paramount")
}

model AuthenticatorApp {
  id            String   @id(map: "PK_AuthenticatorApp") @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  accountName   String   @db.VarChar(255)
  issuer        String   @db.VarChar(255)
  secret        String   @db.VarChar(255)
  recoveryCodes String   @db.VarChar(1024)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_AuthenticatorApp_userId")
  @@schema("paramount")
}

model ChangeEmailRequest {
  id        String   @id(map: "PK_ChangeEmailRequest") @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  email     String
  expires   DateTime
  valid     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_ChangeEmailRequest_userId")
  @@schema("paramount")
}

model Contact {
  id             String             @id(map: "PK_Contact") @default(uuid()) @db.Uuid
  organizationId String             @db.Uuid
  record         ContactRecord      @default(PERSON)
  image          String?            @db.VarChar(2048)
  name           String             @db.VarChar(255)
  email          String?            @db.VarChar(255)
  address        String?            @db.VarChar(255)
  phone          String?            @db.VarChar(32)
  stage          ContactStage       @default(LEAD)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  activities     ContactActivity[]
  comments       ContactComment[]
  notes          ContactNote[]
  pageVisits     ContactPageVisit[]
  tasks          ContactTask[]
  favorites      Favorite[]
  tags           ContactTag[]       @relation("ContactToContactTag")

  @@index([organizationId], map: "IX_Contact_organizationId")
  @@schema("paramount")
}

model ContactActivity {
  id         String     @id(map: "PK_ContactActivity") @default(uuid()) @db.Uuid
  contactId  String     @db.Uuid
  actionType ActionType
  actorId    String     @db.VarChar(255)
  actorType  ActorType
  metadata   Json?
  occurredAt DateTime   @default(now())
  contact    Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([contactId], map: "IX_ContactActivity_contactId")
  @@index([occurredAt], map: "IX_ContactActivity_occurredAt")
  @@schema("paramount")
}

model ContactComment {
  id        String   @id(map: "PK_ContactComment") @default(uuid()) @db.Uuid
  contactId String   @db.Uuid
  userId    String   @db.Uuid
  text      String   @db.VarChar(2000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([contactId], map: "IX_ContactComment_contactId")
  @@index([userId], map: "IX_ContactComment_userId")
  @@schema("paramount")
}

model ContactImage {
  id          String  @id(map: "PK_ContactImage") @default(uuid()) @db.Uuid
  contactId   String  @db.Uuid
  data        Bytes?
  contentType String? @db.VarChar(255)
  hash        String? @db.VarChar(64)

  @@index([contactId], map: "IX_ContactImage_contactId")
  @@schema("paramount")
}

model ContactNote {
  id        String   @id(map: "PK_ContactNote") @default(uuid()) @db.Uuid
  contactId String   @db.Uuid
  userId    String   @db.Uuid
  text      String?  @db.VarChar(8000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([contactId], map: "IX_ContactNote_contactId")
  @@index([userId], map: "IX_ContactNote_userId")
  @@schema("paramount")
}

model ContactPageVisit {
  id        String   @id(map: "PK_ContactPageVisit") @default(uuid()) @db.Uuid
  contactId String   @db.Uuid
  userId    String?  @db.Uuid
  timestamp DateTime @default(now())
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([contactId], map: "IX_ContactPageVisit_contactId")
  @@index([userId], map: "IX_ContactPageVisit_userId")
  @@schema("paramount")
}

model ContactTag {
  id       String    @id(map: "PK_ContactTag") @default(uuid()) @db.Uuid
  text     String    @unique @db.VarChar(128)
  contacts Contact[] @relation("ContactToContactTag")

  @@schema("paramount")
}

model ContactTask {
  id          String            @id(map: "PK_ContactTask") @default(uuid()) @db.Uuid
  contactId   String            @db.Uuid
  title       String            @db.VarChar(255)
  description String?           @db.VarChar(8000)
  status      ContactTaskStatus @default(OPEN)
  dueDate     DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  contact     Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([contactId], map: "IX_ContactTask_contactId")
  @@schema("paramount")
}

model Favorite {
  id        String  @id(map: "PK_Favorite") @default(uuid()) @db.Uuid
  userId    String  @db.Uuid
  contactId String  @db.Uuid
  order     Int     @default(0)
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_Favorite_userId")
  @@index([contactId], map: "IX_Favorite_contactId")
  @@schema("paramount")
}

model Feedback {
  id             String           @id(map: "PK_Feedback") @default(uuid()) @db.Uuid
  organizationId String           @db.Uuid
  userId         String?          @db.Uuid
  category       FeedbackCategory @default(SUGGESTION)
  message        String           @db.VarChar(4000)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?            @relation(fields: [userId], references: [id])

  @@index([organizationId], map: "IX_Feedback_organizationId")
  @@index([userId], map: "IX_Feedback_userId")
  @@schema("paramount")
}

model Invitation {
  id             String           @id(map: "PK_Invitation") @default(uuid()) @db.Uuid
  organizationId String           @db.Uuid
  token          String           @default(uuid()) @db.Uuid
  email          String           @db.VarChar(255)
  status         InvitationStatus @default(PENDING)
  lastSentAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           Role
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId], map: "IX_Invitation_organizationId")
  @@index([token], map: "IX_Invitation_token")
  @@schema("paramount")
}

model Membership {
  id             String       @id(map: "PK_Membership") @default(uuid()) @db.Uuid
  organizationId String       @db.Uuid
  userId         String       @db.Uuid
  isOwner        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  role           Role
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@schema("paramount")
}

model Notification {
  id        String    @id(map: "PK_Notification") @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  subject   String?   @db.VarChar(128)
  content   String    @db.VarChar(8000)
  link      String?   @db.VarChar(2000)
  seenAt    DateTime?
  dismissed Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_Notification_userId")
  @@schema("paramount")
}

model Organization {
  id               String       @id(map: "PK_Organization") @default(uuid()) @db.Uuid
  stripeCustomerId String
  name             String       @db.VarChar(255)
  address          String?      @db.VarChar(255)
  phone            String?      @db.VarChar(32)
  email            String?      @db.VarChar(255)
  website          String?      @db.VarChar(2000)
  tier             String       @default("free") @db.VarChar(255)
  facebookPage     String?      @db.VarChar(2000)
  instagramProfile String?      @db.VarChar(2000)
  linkedInProfile  String?      @db.VarChar(2000)
  tikTokProfile    String?      @db.VarChar(2000)
  xProfile         String?      @db.VarChar(2000)
  youTubeChannel   String?      @db.VarChar(2000)
  logo             String?      @db.VarChar(2048)
  slug             String       @db.VarChar(255)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  apiKeys          ApiKey[]
  billToICs        BillToIC[]
  claims           Claim[]
  contacts         Contact[]
  feedback         Feedback[]
  ics              IC[]
  invitations      Invitation[]
  memberships      Membership[]
  users            User[]
  webhooks         Webhook[]
  businessHours    WorkHours[]

  @@index([stripeCustomerId], map: "IX_Organization_stripeCustomerId")
  @@schema("paramount")
}

model OrganizationLogo {
  id             String  @id(map: "PK_OrganizationLogo") @default(uuid()) @db.Uuid
  organizationId String  @db.Uuid
  data           Bytes?
  contentType    String? @db.VarChar(255)
  hash           String? @db.VarChar(64)

    @@index([organizationId], map: "IX_OrganizationLogo_organizationId")
  @@schema("paramount")
}

model ResetPasswordRequest {
  id        String   @id(map: "PK_ResetPasswordRequest") @default(uuid()) @db.Uuid
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "IX_ResetPasswordRequest_email")
  @@schema("paramount")
}

model Session {
  id           String   @id(map: "PK_Session") @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "IX_Session_userId")
  @@schema("paramount")
}

model User {
  id                           String               @id(map: "PK_User") @default(uuid()) @db.Uuid
  image                        String?              @db.VarChar(2048)
  name                         String               @db.VarChar(64)
  email                        String?              @unique
  emailVerified                DateTime?
  password                     String?              @db.VarChar(60)
  lastLogin                    DateTime?
  phone                        String?              @db.VarChar(32)
  locale                       String               @default("en-US") @db.VarChar(8)
  completedOnboarding          Boolean              @default(false)
  enabledContactsNotifications Boolean              @default(false)
  enabledInboxNotifications    Boolean              @default(false)
  enabledWeeklySummary         Boolean              @default(false)
  enabledNewsletter            Boolean              @default(false)
  enabledProductUpdates        Boolean              @default(false)
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  organizationId               String               @db.Uuid
  status                       EntityStatus         @default(ACTIVE)
  role                         Role                 @default(GENERIC_SUPPORT)
  accounts                     Account[]
  authenticatorApp             AuthenticatorApp?
  changeEmailRequests          ChangeEmailRequest[]
  updatedClaimStatuses         ClaimStatus[]        @relation("StatusUpdatedBy")
  comments                     ContactComment[]
  notes                        ContactNote[]
  pageVisits                   ContactPageVisit[]
  favorites                    Favorite[]
  feedback                     Feedback[]
  memberships                  Membership[]
  notifications                Notification[]
  sessions                     Session[]
  organizations                Organization         @relation(fields: [organizationId], references: [id])
  claims                       Claim[]              @relation("ClaimToUser")
  @@schema("paramount")
}

model UserImage {
  id          String  @id(map: "PK_UserImage") @default(uuid()) @db.Uuid
  userId      String  @db.Uuid
  data        Bytes?
  contentType String? @db.VarChar(255)
  hash        String? @db.VarChar(64)

  @@index([userId], map: "IX_UserImage_userId")
  @@schema("paramount")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("paramount")
}

model Webhook {
  id             String           @id(map: "PK_Webhook") @default(uuid()) @db.Uuid
  organizationId String           @db.Uuid
  url            String           @db.VarChar(2000)
  triggers       WebhookTrigger[]
  secret         String?          @db.VarChar(1024)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId], map: "IX_Webhook_organizationId")
  @@schema("paramount")
}

model WorkHours {
  id             String         @id(map: "PK_WorkHours") @default(uuid()) @db.Uuid
  organizationId String         @db.Uuid
  dayOfWeek      DayOfWeek      @default(SUNDAY)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  timeSlots      WorkTimeSlot[]

  @@index([organizationId], map: "IX_WorkHours_organizationId")
  @@schema("paramount")
}

model WorkTimeSlot {
  id          String    @id(map: "PK_WorkTimeSlot") @default(uuid()) @db.Uuid
  workHoursId String    @db.Uuid
  start       DateTime  @db.Time(0)
  end         DateTime  @db.Time(0)
  workHours   WorkHours @relation(fields: [workHoursId], references: [id], onDelete: Cascade)

  @@index([workHoursId], map: "IX_WorkTimeSlot_workHoursId")
  @@schema("paramount")
}

model IC {
  id                String            @id @default(uuid()) @db.Uuid
  organizationId    String            @db.Uuid
  name              String
  ic_code           String
  address           String
  GST               String
  contactPersonName String
  contactNumber     String
  contactEmail      String
  status            EntityStatus      @default(ACTIVE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  organization      Organization      @relation(fields: [organizationId], references: [id])
  insurancePolicy   InsurancePolicy[]
  ros               RO[]

  @@schema("paramount")
}

model RO {
  id                String       @id @default(uuid()) @db.Uuid
  icId              String       @db.Uuid
  name              String
  ro_code           String
  address           String
  GST               String
  contactPersonName String
  contactNumber     String
  contactEmail      String
  status            EntityStatus @default(ACTIVE)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  hubs              Hub[]

  ic                IC           @relation(fields: [icId], references: [id])

  @@schema("paramount")
}

model Hub {
  id                String       @id @default(uuid()) @db.Uuid
  roId              String       @db.Uuid
  name              String
  hub_code          String
  address           String
  GST               String
  contactPersonName String
  contactNumber     String
  contactEmail      String
  status            EntityStatus @default(ACTIVE)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  claims            Claim[]
  ro                RO           @relation(fields: [roId], references: [id])

  @@schema("paramount")
}

model InsurancePolicy {
  id                   String             @id @default(uuid()) @db.Uuid
  policyNumber         String
  policyStartDate      DateTime
  policyEndDate        DateTime
  Confirmation_64v     Boolean
  NCB_Confirmation     Boolean
  NCBType              NCBType
  midYearTransfer      Boolean
  midYearTransferDate  DateTime?
  insuredDeclaredValue Float
  voluntaryExcess      Float?
  type                 policyType
  policyCover          policyCoverOptions
  breakIn              Boolean
  claimHistory         Boolean
  claimAmount          String?
  nilDepreciationCover Boolean
  depreciationCover    Boolean
  consumablesCover     Boolean
  additionalTowing     Boolean
  tyreCover            Boolean
  returnToInvoice      Boolean
  vehicleId            String             @unique @db.Uuid
  ownerId              String             @unique @db.Uuid
  icId                 String             @db.Uuid
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  claims               Claim[]
  ic                   IC                 @relation(fields: [icId], references: [id])
  owner                Owner              @relation(fields: [ownerId], references: [id])
  vehicle              Vehicle            @relation(fields: [vehicleId], references: [id])
  

  @@schema("paramount")
}

model Owner {
  id                String           @id @default(uuid()) @db.Uuid
  name              String
  address           String?
  email             String?
  contactNumber     String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  insurancePolicies InsurancePolicy?
  vehicle           Vehicle?

  @@schema("paramount")
}

model Vehicle {
  id                      String           @id @default(uuid()) @db.Uuid
  name                    String
  vehicleNumber           String
  vehicleRegistrationDate DateTime
  ManufacturedYear        String
  make                    String
  model                   String
  variant                 String
  chassisNumber           String
  chassisVerified         Boolean
  engineNumber            String
  engineVerified          Boolean
  vehicleType             VehicleType
  cubicCapacity           Int
  color                   String?
  bodyType                String?
  vehicleClassType        vehicleClassType
  seatingCapacity         Int
  hypothecated            Boolean
  hypothecatedWith        String?
  RTOEndorsement          Boolean
  OdometerReading         Int
  fuelUsage               FuelTypes
  taxPaid                 Int
  ownerId                 String           @unique @db.Uuid
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  insurancePolicies       InsurancePolicy?
  ownerDetails            Owner            @relation(fields: [ownerId], references: [id])

  @@schema("paramount")
}

model Driver {
  id                String     @id @default(uuid()) @db.Uuid
  vehicleParked     Boolean
  relationWithOwner String?
  name              String?
  address           String?
  contactNumber     String?
  licenseNumber     String?
  licenseType       String?
  driverDOB         DateTime?
  issueDate         DateTime?
  expiryDate        DateTime?
  MDLAuthority      String?
  DLEndorsement     String?
  drivingAllowed    Boolean
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  incidents         Incident[]

  @@schema("paramount")
}

model LossAndSurveyDetails {
  id                     String   @id @default(uuid()) @db.Uuid
  accidentDate           DateTime
  intimationDate         DateTime @default(now())
  surveyAllotmentDate    DateTime
  surveyDate             DateTime
  lossDescription        String
  lossNature             String
  observation            String?
  thirdPartyLoss         Boolean
  policeComplaintNo      String?
  policeComplaintDetails String?
  claimId                String   @unique @db.Uuid
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  claim                  Claim    @relation(fields: [claimId], references: [id])

  @@schema("paramount")
}

model Workshop {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  address     String
  contact     String
  contactName String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  claims      Claim[]
  workOrders  WorkOrder[]

  @@schema("paramount")
}

model Incident {
  id          String   @id @default(uuid()) @db.Uuid
  description String
  driverId    String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  claims      Claim[]
  driver      Driver   @relation(fields: [driverId], references: [id])

  @@schema("paramount")
}

model Claim {
  id                  String                @id @default(uuid()) @db.Uuid
  claimNumber         String                @unique
  internalClaimNumber String?               @unique
  hubId               String?               @db.Uuid
  incidentId          String?               @db.Uuid
  workshopId          String?               @db.Uuid
  organizationId      String                @db.Uuid
  insurancePolicyId   String?               @db.Uuid
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  hub                 Hub?                  @relation(fields: [hubId], references: [id])
  incident            Incident?             @relation(fields: [incidentId], references: [id])
  insurancePolicy     InsurancePolicy?      @relation(fields: [insurancePolicyId], references: [id])
  organization        Organization          @relation(fields: [organizationId], references: [id])
  workshop            Workshop?             @relation(fields: [workshopId], references: [id])
  claimStatus         ClaimStatus?
  images              Image[]               @relation("ClaimImages")
  lossDetails         LossAndSurveyDetails?
  workOrder           WorkOrder?
  users               User[]                @relation("ClaimToUser")

  @@schema("paramount")
}

model WorkOrder {
  id         String    @id @default(uuid()) @db.Uuid
  billId     String?   @db.Uuid
  workshopId String?   @db.Uuid
  claimId    String    @unique @db.Uuid
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  items      Item[]
  bill       Bill?     @relation(fields: [billId], references: [id])
  claim      Claim     @relation(fields: [claimId], references: [id])
  workshop   Workshop? @relation(fields: [workshopId], references: [id])

  @@index([billId])
  @@index([workshopId])
  @@index([claimId])
  @@schema("paramount")
}

model ClaimStatus {
  id          String          @id @default(uuid()) @db.Uuid
  status      claimStatusType
  claimId     String          @unique @db.Uuid
  updatedById String          @db.Uuid
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  claim       Claim           @relation(fields: [claimId], references: [id])
  updatedBy   User            @relation("StatusUpdatedBy", fields: [updatedById], references: [id])

  @@schema("paramount")
}

model Item {
  id              String            @id @default(uuid()) @db.Uuid
  description     String
  repairOrReplace workOrderItemType
  labourCharges   Float
  paintCharges    Float
  isAllowed       Boolean           @default(true)
  workOrderId     String            @db.Uuid
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  workOrder       WorkOrder         @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
  @@schema("paramount")
}

model BillToIC {
  id             String       @id @default(uuid()) @db.Uuid
  billId         String       @db.Uuid
  organizationId String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  bill           Bill         @relation(fields: [billId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@schema("paramount")
}

model Bill {
  id              String      @id @default(uuid()) @db.Uuid
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  billCareDetails BillItems[]
  billToICs       BillToIC[]
  workOrders      WorkOrder[]

  @@schema("paramount")
}

model BillItems {
  id        String   @id @default(uuid()) @db.Uuid
  billId    String   @db.Uuid
  details   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bill      Bill     @relation(fields: [billId], references: [id])

  @@index([billId])

  @@schema("paramount")
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  fileName  String   @unique
  mimeType  String
  size      Int
  claimId   String?  @db.Uuid
  createdAt DateTime @default(now())
  claim     Claim?   @relation("ClaimImages", fields: [claimId], references: [id])

  @@schema("paramount")
}

enum claimStatusType {
  CLAIM_INITIATED @map("claim_initiated")
  CLAIM_APPROVED @map("claim_approved")
  CLAIM_ASSESSED @map("claim_assessed")
  CLAIM_REJECTED @map("claim_rejected")
  IN_PROGRESS @map("in_progress")
  SUBMITTED @map("submitted")

  @@schema("paramount")
}

enum workOrderItemType {
  REPAIR @map("repair")
  REPLACE @map("replace")

  @@schema("paramount")
}

enum relationshipType {
  SELF @map("self")
  SPOUSE @map("spouse")
  FATHER @map("father")
  MOTHER @map("mother")
  BROTHER @map("brother")
  SISTER @map("sister")
  SON @map("son")
  DAUGHTER @map("daughter")
  OTHER @map("other")

  @@schema("paramount")
}

enum policyCoverOptions {
  COMPREHENSIVE @map("comprehensive")
  THIRD_PARTY @map("third_party")
  STAND_ALONE @map("stand_alone")
  OWN_DAMAGE @map("own_damage")
  INTERNAL_RISK @map("internal_risk")
  ROAD_TRANSIT @map("road_transit")
  ROAD_RISK @map("road_risk")
  THIRD_PARTY_WITH_FIRE_AND_THEFT @map("third_party_with_fire_and_theft")

  @@schema("paramount")
}

enum FuelTypes {
  PETROL @map("petrol")
  PETROL_CNG @map("petrol_cng")
  DIESEL @map("diesel")
  CNG @map("cng")
  ELECTRIC @map("electric")

  @@schema("paramount")
}

enum NCBType {
  TWENTY @map("twenty")
  TWENTY_FIVE @map("twenty_five")
  THIRTY_FIVE @map("thirty_five")
  FORTY_FIVE @map("forty_five")
  FIFTY @map("fifty")

  @@schema("paramount")
}

enum vehicleClassType {
  TWO_WHEELER @map("two_wheeler")
  FOUR_WHEELER @map("four_wheeler")

  @@schema("paramount")
}

enum VehicleType {
  TWO_WHEELER @map("two_wheeler")
  PRIVATE @map("private")
  COMMERCIAL @map("commercial")

  @@schema("paramount")
}

enum policyType {
  NEW @map("new")
  RENEW @map("renew")
  ROLLOVER @map("rollover")

  @@schema("paramount")
}

enum EntityStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")

  @@schema("paramount")
}

enum Role {
  INITIATOR       @map("initiator")
  APPROVER        @map("approver")
  ASSESSOR        @map("assessor")
  IC_HOLDER       @map("ic_holder")
  RO_HOLDER       @map("ro_holder")
  HUB_HOLDER      @map("hub_holder")
  ADMIN           @map("admin")
  GENERIC_SUPPORT @map("generic_support")

  @@schema("paramount")
}

enum ActionType {
  CREATE @map("create")
  UPDATE @map("update")
  DELETE @map("delete")

  @@schema("paramount")
}

enum ActorType {
  SYSTEM @map("system")
  MEMBER @map("member")
  API    @map("api")

  @@schema("paramount")
}

enum ContactRecord {
  PERSON  @map("person")
  COMPANY @map("company")

  @@schema("paramount")
}

enum ContactStage {
  LEAD           @map("lead")
  QUALIFIED      @map("qualified")
  OPPORTUNITY    @map("opportunity")
  PROPOSAL       @map("proposal")
  IN_NEGOTIATION @map("inNegotiation")
  LOST           @map("lost")
  WON            @map("won")

  @@schema("paramount")
}

enum ContactTaskStatus {
  OPEN      @map("open")
  COMPLETED @map("completed")

  @@schema("paramount")
}

enum DayOfWeek {
  SUNDAY    @map("sunday")
  MONDAY    @map("monday")
  TUESDAY   @map("tuesday")
  WEDNESDAY @map("wednesday")
  THURSDAY  @map("thursday")
  FRIDAY    @map("friday")
  SATURDAY  @map("saturday")

  @@schema("paramount")
}

enum FeedbackCategory {
  SUGGESTION @map("suggestion")
  PROBLEM    @map("problem")
  QUESTION   @map("question")

  @@schema("paramount")
}

enum InvitationStatus {
  PENDING  @map("pending")
  ACCEPTED @map("accepted")
  REVOKED  @map("revoked")

  @@schema("paramount")
}

enum WebhookTrigger {
  CONTACT_CREATED @map("contactCreated")
  CONTACT_UPDATED @map("contactUpdated")
  CONTACT_DELETED @map("contactDeleted")

  @@schema("paramount")
}
